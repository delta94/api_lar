-- Users

SELECT 
    id,
    uuid,
    name,
    email,
    password,
    sex AS gender,
    phone,
    birthday,
    NULL AS sub_email,
    avatar,
    address,
    owner,
    null as parent_id,
    facebook AS facebook_id,
    NULL AS google_id,
    level,
    0 AS point,
    money,
    NULL AS passport_last_name,
    NULL AS passport_first_name,
    NULL AS passport_infomation,
    id_card1 AS passport_front_card,
    id_card2 AS passport_back_card,
    bank_account_number AS account_number,
    bank_account_address AS account_branch,
    city_id,
    district_id,
    type,
    null as type_create,
    null as provider_id,
    null as vip,
    null as is_confirm,
    null as is_transfer,
    null as is_cash,
    null as is_baokim,
    1 AS status,
    null as source,
    sale_id,
    remember_token,
    null as limit_send_mail,
    0 as count_send_mail,
    1 as subcribe,
    null as ref_code,
    null as settings,
    null as time_add_sale,
    deleted_at,
    created_at,
    updated_at
FROM
    users;

-- Rooms 
SELECT 
    id,
    client_id AS merchant_id,
    number_people AS max_guest,
    charge_guest AS max_additional_guest,
    number_bed,
    bedroom AS number_room,
    city_id,
    district_id,
    type AS room_type,
    checkin,
    checkout,
    price_by_day AS price_day,
    price_block AS price_hour,
    price_by_hour AS price_after_hour,
    additional_guest AS price_charge_guest,
    cleaning_fee,
    standard_point,
    is_manager,
    hot,
    0 AS new,
    is_last_mile AS latest_deal,
    by_time AS rent_type,
    NULL AS rules,
    longitude,
    latitude,
    (SELECT 
            COUNT(*)
        FROM
            booking
        WHERE
            booking.room_id = rooms.id
                AND booking.payment_status IN (3 , 4)
                AND booking.STATUS = 4) AS total_booking,
    0 AS avg_cleanliness,
    0 AS avg_service,
    0 AS avg_quality,
    0 AS avg_valuable,
    0 AS avg_avg_rating,
    '{"refunds":[{"days":7,"amount":100}],"no_booking_cancel":0}' AS settings,
    0 AS total_review,
    NULL AS airbnb_calendar,
    NULL AS total_recommend,
    0 as is_discount,
    null as price_day_discount,
    null as price_hour_discount,
    20 AS comission,
    100 AS percent,
    status,
    1 as merchant_status,
    sale_id,
    deleted_at,
    created_at,
    updated_at
FROM
    `rooms`;

-- Room_Translates

SELECT 
    room_translates.locale AS lang,
    room_id,
    ANY_VALUE(name) AS name,
    (SELECT 
            rooms.address
        FROM
            rooms
        WHERE
            rooms.id = room_translates.room_id) AS address,
    ANY_VALUE(note) AS note,
    ANY_VALUE(space) AS space,
    ANY_VALUE(description) AS description,
    ANY_VALUE(deleted_at) AS deleted_at,
    ANY_VALUE(created_at) AS created_at,
    ANY_VALUE(updated_at) AS updated_at
FROM
    `room_translates`
GROUP BY room_id , locale;

-- Room_Medias

SELECT 
    id,
    room_id,
    source AS image,
    1 AS status,
    3 AS type,
    NULL AS deleted_at,
    created_at,
    updated_at
FROM
    media_room;

-- Comforts (Only Vietnamese)

select id, `created_at`, `updated_at`, null as icon, null as icon_name from comforts where locale = 'vi';

-- Comforts -> Comfort_Translates (Only Vietnamese)

select id as `comfort_id`, `name`, `description`, `created_at`, `updated_at`,'vi' as `lang` from comforts where locale = 'vi';

-- Room Comforts (Only Vietnamese)

select * from room_comforts where comfort_id in (select id from comforts where locale = 'vi');

-- Bookings

SELECT 
    ANY_VALUE(booking.id) AS id,
    ANY_VALUE(booking.uuid) AS uuid,
    ANY_VALUE(booking.code) AS code,
    ANY_VALUE(booking.name) AS name,
    ANY_VALUE(booking.phone) AS phone,
    ANY_VALUE(ask_room_log.sex) AS sex,
    ANY_VALUE(ask_room_log.birthday) AS birthday,
    ANY_VALUE(booking.email) AS email,
    ANY_VALUE(booking.email_receive) AS email_received,
    ANY_VALUE(booking.name_receive) AS name_received,
    ANY_VALUE(booking.phone_receive) AS phone_received,
    ANY_VALUE(booking.room_id) AS room_id,
    ANY_VALUE(booking.customer_id) AS customer_id,
    ANY_VALUE(booking.client_id) AS merchant_id,
    ANY_VALUE(booking.checkin) AS checkin,
    ANY_VALUE(booking.checkout) AS checkout,
    ANY_VALUE(booking.price_original) AS price_original,
    ANY_VALUE(booking.discount) AS price_discount,
    NULL AS coupon,
    ANY_VALUE(booking.note) AS note,
    ANY_VALUE(booking.total_fee) AS total_fee,
    ANY_VALUE(booking.status) AS status,
    ANY_VALUE(booking.number_of_guests) AS number_of_guests,
    ANY_VALUE(booking.service_fee) AS service_fee,
    0 AS additional_fee,
    0 AS coupon_discount,
    ANY_VALUE(booking.type) AS type,
    ANY_VALUE(ask_room_log.price_range) AS price_range,
    ANY_VALUE(booking.type_booking) AS booking_type,
    ANY_VALUE(booking.payment_method) AS payment_method,
    ANY_VALUE(booking.payment_status) AS payment_status,
    ANY_VALUE(ask_room_log.contact_channel) AS source,
    ANY_VALUE(booking.exchange_rate) AS exchange_rate,
    NULL AS age_range,
    0 AS total_refund,
    '{"refunds":[{"days":7,"amount":100}],"no_booking_cancel":0}' AS settings,
    null as review_url,
    0 as status_reviews,
    ANY_VALUE(booking.deleted_at) AS deleted_at,
    ANY_VALUE(booking.created_at) AS created_at,
    ANY_VALUE(booking.updated_at) AS updated_at
FROM
    `booking`
        LEFT JOIN
    ask_room_log ON booking.created_at = ask_room_log.created_at
GROUP BY booking.uuid;

-- Cities

SELECT id,region_id,name,short_name,null as image,code,longitude,latitude,priority,0 as hot,allow as status, deleted_at, created_at,updated_at FROM `cities`;

-- Districts

SELECT id,city_id,name,short_name,code,kind_from,kind_to,0 as hot,0 as priority,1 as status,deleted_at,created_at,updated_at FROM `districts`;

-- Payment Histories
select booking_id, total_received, total_debt,note, (status - 1) as status, confirm, created_at, updated_at  from payment_histories where status <> 4;


-- Blogs
select id, title,  teaser as description, image, content, active as status, hot,null as new,category_id, type, user_id,  slug, null as deleted_at, created_at, updated_at from blogs

-- Blogs tag
select * from blog_tag

-- tags
select id, tag as name, slug, created_at, updated_at from tags

-- baokim_trade_histories

select created_on, customer_address, customer_email, customer_name, customer_phone, merchant_email, merchant_id, merchant_name, merchant_phone, fee_amount, net_amount, total_amount, order_id, payment_type, transaction_id, transaction_status, checksum, client_id from baokim_trade_histories


-----------------------change status room with less than 5 image-----------------
update rooms set rooms.status = 0 where id in (select room_id from (select room_id, COUNT(*) as img from room_medias join rooms on room_medias.room_id = rooms.id where rooms.status in (1,2) GROUP BY room_medias.room_id having img <5) as temp)
-- Update Room percent

update rooms set percent = 100 where status = 1
update rooms set merchant_status = 1 where status = 1 or percent = 100